/* tslint:disable */
/* eslint-disable */
/**
 * Devmarks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Folder,
    FolderFromJSON,
    FolderFromJSONTyped,
    FolderToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Bookmark
 */
export interface Bookmark {
    /**
     * 
     * @type {number}
     * @memberof Bookmark
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    color?: string;
    /**
     * 
     * @type {User}
     * @memberof Bookmark
     */
    owner?: User;
    /**
     * if embed=folders is specified
     * @type {Array<Folder>}
     * @memberof Bookmark
     */
    folders?: Array<Folder> | null;
}

export function BookmarkFromJSON(json: any): Bookmark {
    return BookmarkFromJSONTyped(json, false);
}

export function BookmarkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bookmark {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'url': json['url'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'owner': !exists(json, 'owner') ? undefined : UserFromJSON(json['owner']),
        'folders': !exists(json, 'folders') ? undefined : (json['folders'] === null ? null : (json['folders'] as Array<any>).map(FolderFromJSON)),
    };
}

export function BookmarkToJSON(value?: Bookmark | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'url': value.url,
        'color': value.color,
        'owner': UserToJSON(value.owner),
        'folders': value.folders === undefined ? undefined : (value.folders === null ? null : (value.folders as Array<any>).map(FolderToJSON)),
    };
}


