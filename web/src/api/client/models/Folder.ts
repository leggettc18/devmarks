/* tslint:disable */
/* eslint-disable */
/**
 * Devmarks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Bookmark,
    BookmarkFromJSON,
    BookmarkFromJSONTyped,
    BookmarkToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    name: string;
    /**
     * 
     * @type {Folder}
     * @memberof Folder
     */
    parent?: Folder;
    /**
     * 
     * @type {User}
     * @memberof Folder
     */
    owner?: User;
    /**
     * if embed=bookmarks is specified
     * @type {Array<Bookmark>}
     * @memberof Folder
     */
    bookmarks?: Array<Bookmark> | null;
}

export function FolderFromJSON(json: any): Folder {
    return FolderFromJSONTyped(json, false);
}

export function FolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Folder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'parent': !exists(json, 'parent') ? undefined : FolderFromJSON(json['parent']),
        'owner': !exists(json, 'owner') ? undefined : UserFromJSON(json['owner']),
        'bookmarks': !exists(json, 'bookmarks') ? undefined : (json['bookmarks'] === null ? null : (json['bookmarks'] as Array<any>).map(BookmarkFromJSON)),
    };
}

export function FolderToJSON(value?: Folder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'parent': FolderToJSON(value.parent),
        'owner': UserToJSON(value.owner),
        'bookmarks': value.bookmarks === undefined ? undefined : (value.bookmarks === null ? null : (value.bookmarks as Array<any>).map(BookmarkToJSON)),
    };
}


