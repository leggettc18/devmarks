/* tslint:disable */
/* eslint-disable */
/**
 * Devmarks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Bookmark
 */
export interface Bookmark {
    /**
     * 
     * @type {number}
     * @memberof Bookmark
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Bookmark
     */
    color?: string;
    /**
     * 
     * @type {User}
     * @memberof Bookmark
     */
    owner?: User;
    /**
     * if embed=folders is specified
     * @type {Array<Folder>}
     * @memberof Bookmark
     */
    folders?: Array<Folder> | null;
}
/**
 * 
 * @export
 * @interface CreateBookmarkRequest
 */
export interface CreateBookmarkRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBookmarkRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookmarkRequest
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookmarkRequest
     */
    color?: string;
}
/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Folder
     */
    name: string;
    /**
     * 
     * @type {Folder}
     * @memberof Folder
     */
    parent?: Folder;
    /**
     * 
     * @type {User}
     * @memberof Folder
     */
    owner?: User;
    /**
     * if embed=bookmarks is specified
     * @type {Array<Bookmark>}
     * @memberof Folder
     */
    bookmarks?: Array<Bookmark> | null;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {number}
     * @memberof RegisterResponse
     */
    id: number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    token: string;
}
/**
 * 
 * @export
 * @interface UpdateBookmarkRequest
 */
export interface UpdateBookmarkRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateBookmarkRequest
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookmarkRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookmarkRequest
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookmarkRequest
     */
    color?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * if embed=bookmarks is specified
     * @type {Array<Bookmark>}
     * @memberof User
     */
    bookmarks?: Array<Bookmark> | null;
}

/**
 * BookmarkApi - axios parameter creator
 * @export
 */
export const BookmarkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new bookmark owned by the current user
         * @param {CreateBookmarkRequest} createBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmark: async (createBookmarkRequest: CreateBookmarkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBookmarkRequest' is not null or undefined
            assertParamExists('createBookmark', 'createBookmarkRequest', createBookmarkRequest)
            const localVarPath = `/bookmarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookmarkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
         * @param {number} id Bookmark ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmark: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBookmark', 'id', id)
            const localVarPath = `/bookmarks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
         * @param {number} id Bookmark ID
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmark: async (id: number, embed?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookmark', 'id', id)
            const localVarPath = `/bookmarks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all bookmarks the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarks: async (embed?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookmarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
         * @param {number} id Bookmark ID
         * @param {UpdateBookmarkRequest} updateBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookmark: async (id: number, updateBookmarkRequest: UpdateBookmarkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBookmark', 'id', id)
            // verify required parameter 'updateBookmarkRequest' is not null or undefined
            assertParamExists('updateBookmark', 'updateBookmarkRequest', updateBookmarkRequest)
            const localVarPath = `/bookmarks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookmarkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookmarkApi - functional programming interface
 * @export
 */
export const BookmarkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookmarkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new bookmark owned by the current user
         * @param {CreateBookmarkRequest} createBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookmark(createBookmarkRequest: CreateBookmarkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bookmark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookmark(createBookmarkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
         * @param {number} id Bookmark ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookmark(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBookmark(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
         * @param {number} id Bookmark ID
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookmark(id: number, embed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bookmark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookmark(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all bookmarks the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookmarks(embed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bookmark>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookmarks(embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
         * @param {number} id Bookmark ID
         * @param {UpdateBookmarkRequest} updateBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBookmark(id: number, updateBookmarkRequest: UpdateBookmarkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bookmark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBookmark(id, updateBookmarkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookmarkApi - factory interface
 * @export
 */
export const BookmarkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookmarkApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new bookmark owned by the current user
         * @param {CreateBookmarkRequest} createBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmark(createBookmarkRequest: CreateBookmarkRequest, options?: any): AxiosPromise<Bookmark> {
            return localVarFp.createBookmark(createBookmarkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
         * @param {number} id Bookmark ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmark(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBookmark(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
         * @param {number} id Bookmark ID
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmark(id: number, embed?: string, options?: any): AxiosPromise<Bookmark> {
            return localVarFp.getBookmark(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all bookmarks the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarks(embed?: string, options?: any): AxiosPromise<Array<Bookmark>> {
            return localVarFp.getBookmarks(embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
         * @param {number} id Bookmark ID
         * @param {UpdateBookmarkRequest} updateBookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookmark(id: number, updateBookmarkRequest: UpdateBookmarkRequest, options?: any): AxiosPromise<Bookmark> {
            return localVarFp.updateBookmark(id, updateBookmarkRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookmarkApi - object-oriented interface
 * @export
 * @class BookmarkApi
 * @extends {BaseAPI}
 */
export class BookmarkApi extends BaseAPI {
    /**
     * 
     * @summary Add a new bookmark owned by the current user
     * @param {CreateBookmarkRequest} createBookmarkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkApi
     */
    public createBookmark(createBookmarkRequest: CreateBookmarkRequest, options?: any) {
        return BookmarkApiFp(this.configuration).createBookmark(createBookmarkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
     * @param {number} id Bookmark ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkApi
     */
    public deleteBookmark(id: number, options?: any) {
        return BookmarkApiFp(this.configuration).deleteBookmark(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
     * @param {number} id Bookmark ID
     * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkApi
     */
    public getBookmark(id: number, embed?: string, options?: any) {
        return BookmarkApiFp(this.configuration).getBookmark(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all bookmarks the current user can access.
     * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkApi
     */
    public getBookmarks(embed?: string, options?: any) {
        return BookmarkApiFp(this.configuration).getBookmarks(embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
     * @param {number} id Bookmark ID
     * @param {UpdateBookmarkRequest} updateBookmarkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkApi
     */
    public updateBookmark(id: number, updateBookmarkRequest: UpdateBookmarkRequest, options?: any) {
        return BookmarkApiFp(this.configuration).updateBookmark(id, updateBookmarkRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FolderApi - axios parameter creator
 * @export
 */
export const FolderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a specific folder specified by the numeric `id`.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder: async (embed?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all folders the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolders: async (embed?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FolderApi - functional programming interface
 * @export
 */
export const FolderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FolderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a specific folder specified by the numeric `id`.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolder(embed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolder(embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all folders the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolders(embed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Folder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolders(embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FolderApi - factory interface
 * @export
 */
export const FolderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FolderApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a specific folder specified by the numeric `id`.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder(embed?: string, options?: any): AxiosPromise<Folder> {
            return localVarFp.getFolder(embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all folders the current user can access.
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolders(embed?: string, options?: any): AxiosPromise<Array<Folder>> {
            return localVarFp.getFolders(embed, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FolderApi - object-oriented interface
 * @export
 * @class FolderApi
 * @extends {BaseAPI}
 */
export class FolderApi extends BaseAPI {
    /**
     * 
     * @summary Get a specific folder specified by the numeric `id`.
     * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFolder(embed?: string, options?: any) {
        return FolderApiFp(this.configuration).getFolder(embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all folders the current user can access.
     * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFolders(embed?: string, options?: any) {
        return FolderApiFp(this.configuration).getFolders(embed, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary User Endpoint, returns the user corresponding to the supplied bearer token
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (embed?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary authenticates a user based on the request body and returns an authentication bearer token
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User Endpoint for registration
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerRequest: RegisterRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('register', 'registerRequest', registerRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary User Endpoint, returns the user corresponding to the supplied bearer token
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(embed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary authenticates a user based on the request body and returns an authentication bearer token
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User Endpoint for registration
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerRequest: RegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary User Endpoint, returns the user corresponding to the supplied bearer token
         * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(embed?: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary authenticates a user based on the request body and returns an authentication bearer token
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<Token> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User Endpoint for registration
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerRequest: RegisterRequest, options?: any): AxiosPromise<RegisterResponse> {
            return localVarFp.register(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary User Endpoint, returns the user corresponding to the supplied bearer token
     * @param {string} [embed] comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.&#x60;/folders/&lt;id&gt;/?embed&#x3D;bookmarks,owner&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(embed?: string, options?: any) {
        return UserApiFp(this.configuration).getUser(embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary authenticates a user based on the request body and returns an authentication bearer token
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public login(loginRequest: LoginRequest, options?: any) {
        return UserApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User Endpoint for registration
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public register(registerRequest: RegisterRequest, options?: any) {
        return UserApiFp(this.configuration).register(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


