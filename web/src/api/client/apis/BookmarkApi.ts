/* tslint:disable */
/* eslint-disable */
/**
 * Devmarks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Bookmark,
    BookmarkFromJSON,
    BookmarkToJSON,
    CreateBookmarkRequest,
    CreateBookmarkRequestFromJSON,
    CreateBookmarkRequestToJSON,
    UpdateBookmarkRequest,
    UpdateBookmarkRequestFromJSON,
    UpdateBookmarkRequestToJSON,
} from '../models';

export interface CreateBookmarkOperationRequest {
    createBookmarkRequest: CreateBookmarkRequest;
}

export interface DeleteBookmarkRequest {
    id: number;
}

export interface GetBookmarkRequest {
    id: number;
    embed?: string;
}

export interface GetBookmarksRequest {
    embed?: string;
}

export interface UpdateBookmarkOperationRequest {
    id: number;
    updateBookmarkRequest: UpdateBookmarkRequest;
}

/**
 * 
 */
export class BookmarkApi extends runtime.BaseAPI {

    /**
     * Add a new bookmark owned by the current user
     */
    async createBookmarkRaw(requestParameters: CreateBookmarkOperationRequest): Promise<runtime.ApiResponse<Bookmark>> {
        if (requestParameters.createBookmarkRequest === null || requestParameters.createBookmarkRequest === undefined) {
            throw new runtime.RequiredError('createBookmarkRequest','Required parameter requestParameters.createBookmarkRequest was null or undefined when calling createBookmark.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookmarks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBookmarkRequestToJSON(requestParameters.createBookmarkRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue));
    }

    /**
     * Add a new bookmark owned by the current user
     */
    async createBookmark(requestParameters: CreateBookmarkOperationRequest): Promise<Bookmark> {
        const response = await this.createBookmarkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
     */
    async deleteBookmarkRaw(requestParameters: DeleteBookmarkRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBookmark.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookmarks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.
     */
    async deleteBookmark(requestParameters: DeleteBookmarkRequest): Promise<void> {
        await this.deleteBookmarkRaw(requestParameters);
    }

    /**
     * Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
     */
    async getBookmarkRaw(requestParameters: GetBookmarkRequest): Promise<runtime.ApiResponse<Bookmark>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookmark.');
        }

        const queryParameters: any = {};

        if (requestParameters.embed !== undefined) {
            queryParameters['embed'] = requestParameters.embed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookmarks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue));
    }

    /**
     * Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.
     */
    async getBookmark(requestParameters: GetBookmarkRequest): Promise<Bookmark> {
        const response = await this.getBookmarkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all bookmarks the current user can access.
     */
    async getBookmarksRaw(requestParameters: GetBookmarksRequest): Promise<runtime.ApiResponse<Array<Bookmark>>> {
        const queryParameters: any = {};

        if (requestParameters.embed !== undefined) {
            queryParameters['embed'] = requestParameters.embed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookmarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookmarkFromJSON));
    }

    /**
     * Get a list of all bookmarks the current user can access.
     */
    async getBookmarks(requestParameters: GetBookmarksRequest): Promise<Array<Bookmark>> {
        const response = await this.getBookmarksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
     */
    async updateBookmarkRaw(requestParameters: UpdateBookmarkOperationRequest): Promise<runtime.ApiResponse<Bookmark>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBookmark.');
        }

        if (requestParameters.updateBookmarkRequest === null || requestParameters.updateBookmarkRequest === undefined) {
            throw new runtime.RequiredError('updateBookmarkRequest','Required parameter requestParameters.updateBookmarkRequest was null or undefined when calling updateBookmark.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookmarks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBookmarkRequestToJSON(requestParameters.updateBookmarkRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue));
    }

    /**
     * Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.
     */
    async updateBookmark(requestParameters: UpdateBookmarkOperationRequest): Promise<Bookmark> {
        const response = await this.updateBookmarkRaw(requestParameters);
        return await response.value();
    }

}
