/* tslint:disable */
/* eslint-disable */
/**
 * Devmarks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Folder,
    FolderFromJSON,
    FolderToJSON,
} from '../models';

export interface GetFolderRequest {
    embed?: string;
}

export interface GetFoldersRequest {
    embed?: string;
}

/**
 * 
 */
export class FolderApi extends runtime.BaseAPI {

    /**
     * Get a specific folder specified by the numeric `id`.
     */
    async getFolderRaw(requestParameters: GetFolderRequest): Promise<runtime.ApiResponse<Folder>> {
        const queryParameters: any = {};

        if (requestParameters.embed !== undefined) {
            queryParameters['embed'] = requestParameters.embed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/folders/{id}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     * Get a specific folder specified by the numeric `id`.
     */
    async getFolder(requestParameters: GetFolderRequest): Promise<Folder> {
        const response = await this.getFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all folders the current user can access.
     */
    async getFoldersRaw(requestParameters: GetFoldersRequest): Promise<runtime.ApiResponse<Array<Folder>>> {
        const queryParameters: any = {};

        if (requestParameters.embed !== undefined) {
            queryParameters['embed'] = requestParameters.embed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderFromJSON));
    }

    /**
     * Get a list of all folders the current user can access.
     */
    async getFolders(requestParameters: GetFoldersRequest): Promise<Array<Folder>> {
        const response = await this.getFoldersRaw(requestParameters);
        return await response.value();
    }

}
