openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  - url: https://api.local/
paths:
  /me:
    get:
      summary: 'User Endpoint, returns the user corresponding to the supplied bearer token'
      operationId: getUser
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample response: Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/token:
    post:
      summary: 'authenticates a user based on the request body and returns an authentication bearer token'
      operationId: login
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Authenticated Successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    format: uuid
  /users:
    post:
      summary: 'User Endpoint for registration'
      operationId: register
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              example:
                email: "test@example.com"
                password: "********"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: integer
                    format: int64
                    minimum: 1
  /bookmarks:
    get:
      summary: 'Get a list of all bookmarks the current user can access.'
      operationId: getBookmarks
      tags:
        - bookmark
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: "List of current user's bookmarks"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/Bookmark"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          $ref:  "#/components/responses/InternalServerError"
    post:
      summary: 'Add a new bookmark owned by the current user'
      operationId: createBookmark
      tags:
        - bookmark
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
              properties:
                name:
                  type: string
                url:
                  type: string
                  format: uri
                color:
                  type: string
              example:
                name: Devmarks
                url: 'https://devmarks.app'
                color: '#FFFFFF'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '500':
          $ref:  "#/components/responses/InternalServerError"
  /bookmarks/{id}:
    get:
      summary: 'Get a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to view it.'
      operationId: getBookmark
      tags:
        - bookmark
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: "the bookmark with the given id"
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/Bookmark"
        '401':
          $ref:  "#/components/responses/UnauthorizedError"
        '403':
          $ref:  "#/components/responses/Forbidden"
        '404':
          $ref:  "#/components/responses/NotFound"
        '500':
          $ref:  "#/components/responses/InternalServerError"
    patch:
      summary: 'Update a specific bookmark by its ID, if the current user (specified by the bearer token) has permission to edit it.'
      operationId: updateBookmark
      tags:
        - bookmark
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  format: int64
                  minimum: 1
                name:
                  type: string
                url:
                  type: string
                  format: uri
                color:
                  type: string
              example:
                id: 1
                name: Devmarks
                url: 'https://devmarks.app'
                color: '#EEEEEE'
      responses:
        '200':
          description: 'The updated bookmark'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"
        '401':
          $ref:  "#/components/responses/UnauthorizedError"
        '403':
          $ref:  "#/components/responses/Forbidden"
        '500':
          $ref:  "#/components/responses/InternalServerError"
    delete:
      summary: 'Deletes the specified bookmark if the current user (specified by the bearer token) has permission to delete it.'
      operationId: deleteBookmark
      tags:
        - bookmark
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: integer
                  format: int64
                  minimum: 1
      responses:
        '204':
          description: Successfully Deleted
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /folders:
    get:
      summary: 'Get a list of all folders the current user can access.'
      operationId: getFolders
      tags:
        - folder
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample Response: List of valid folders.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
              examples:
                'with no embed parameter':
                  value:
                    - id: 1
                      name: Test Folder
                      parent: null
                      owner: null
                      bookmarks: null
                'with embed=parent':
                  value:
                    - id: 2
                      name: Test Folder 2
                      parent:
                        id: 1
                        name: Test Folder
                        owner: null
                        bookmarks: null
                      owner: null
                      bookmarks: null
                'with embed=parent,bookmarks,owner':
                  value:
                    - id: 2
                      name: Test Folder 2
                      parent:
                        id: 1
                        name: Test Folder
                        owner: null
                        bookmarks: null
                      owner:
                        id: 1
                        email: test@example.com
                      bookmarks:
                        - id: 1
                          name: Test Bookmark
                          url: https://www.test.com
                          owner: null
                          folders: null
  /folders/{id}:
    get:
      summary: 'Get a specific folder specified by the numeric `id`.'
      operationId: getFolder
      tags:
        - folder
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample Response: A folder with the given `id`'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
              examples:
                'with no embed parameter':
                  value:
                    id: 1
                    name: Test Folder
                    parent: null
                    owner: null
                    bookmarks: null
                'with embed=parent':
                  value:
                    id: 2
                    name: Test Folder 2
                    parent:
                      - id: 1
                        name: Test Folder
                        owner: null
                        bookmarks: null
                    owner: null
                    bookmarks: null
                'with embed=parent,bookmarks,owner':
                  value:
                    id: 2
                    name: Test Folder 2
                    parent:
                      - id: 1
                        name: Test Folder
                        owner: null
                        bookmarks: null
                    owner:
                      id: 1
                      email: test@example.com
                    bookmarks:
                      - id: 1
                        name: Test Bookmark
                        url: https://www.test.com
                        owner: null
                        folders: null
components:
  parameters:
    embedParam:
      in: query
      name: embed
      schema:
        type: string
      required: false
      description: 'comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.`/folders/<id>/?embed=bookmarks,owner`'
  schemas:
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        bookmarks:
          description: if embed=bookmarks is specified
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Bookmark"
      example:
        id: 1
        email: test@example.com
    Bookmark:
      type: object
      required:
        - id
        - name
        - url
      properties:
        id:
          type: integer
          format: uint64
          minimum: 1
        name:
          type: string
        url:
          type: string
        color:
          type: string
        owner:
          nullable: true
          description: if embed=owner is provided
          $ref: "#/components/schemas/User"
        folders:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Folder"
      example:
        id: 1
        name: Devmarks
        url: https://devmarks.app
        color: '#FFFFFF'
        owner: null
        folders: null
        
    Folder:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        parent:
          nullable: true
          $ref: "#/components/schemas/Folder"
        owner:
          nullable: true
          $ref:  "#/components/schemas/User"
        bookmarks:
          type: array
          nullable: true
          items:
            $ref:  "#/components/schemas/Bookmark"
      example:
        id: 1
        name: Example Folder
        parent: null
        owner: null
        bookmarks: null
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: uuid
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: A server-side error occurred
    UnprocessableEntity:
      description: The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions
    NotFound:
      description: The requested resource does not exist
    Forbidden:
      description: This operation is not permitted for the given user.