openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  - url: https://api.local/
paths:
  /me/:
    get:
      summary: 'User Endpoint, returns the user corresponding to the supplied bearer token'
      operationId: getUser
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample response: Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/:
    get:
      summary: 'Get a list of all folders the current user can access.'
      operationId: getFolders
      tags:
        - folder
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample Response: List of valid folders.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
  /folders/{id}:
    get:
      summary: 'Get a specific folder specified by the numeric `id`.'
      operationId: getFolder
      tags:
        - folder
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/embedParam"
      responses:
        '200':
          description: 'Sample Response: A folder with the given `id`'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
components:
  parameters:
    embedParam:
      in: query
      name: embed
      schema:
        type: string
      required: false
      description: 'comma separated string of related resources to embed in the response. Valid values are values in the response schema that reference other resources. For example, you can get the list of bookmarks in a folder and its user by making the following request.`/folders/<id>/?embed=bookmarks,owner`'
  schemas:
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        bookmarks:
          description: if embed=bookmarks is specified
          type: array
          items:
            $ref: "#/components/schemas/Bookmark"
      example:
        id: 1
        email: test@example.com
    Bookmark:
      type: object
      required:
        - id
        - name
        - url
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        color:
          type: string
        owner:
          description: if embed=owner is provided
          $ref: "#/components/schemas/User"
        folders:
          type: array
          items:
            $ref: "#/components/schemas/Folder"
    Folder:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        parent:
          $ref: "#/components/schemas/Folder"
        owner:
          $ref:  "#/components/schemas/User"
        bookmarks:
          type: array
          items:
            $ref:  "#/components/schemas/Bookmark"
      example:
        id: 2
        name: Test Folder 2
        parent:
          - id: 1
            name: Test Folder
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: uuid
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: A server-side error occurred
security:
  - bearerAuth: [] 